version: '4'
services:

#Product app
  mongodb:
    image: mongo:7.0.5
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: productdb
    volumes:
      - ./data:/data/db
  product:
    build: ./product
    container_name: product
    ports:
      - "8080:8080"
    depends_on:
      - mongodb

#Order app
  mysql:
    image: mysql:8.3.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    ports:
      - "3306:3306"
    volumes:
      - ./mysql:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT;PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  scheme-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENER: http://schema-registry:8081

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8086:8080"
    depends_on:
      - broker
      - scheme-registry
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPPSERVERS: broker:29092
      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG-ENABLED: 'true'

  order:
    build: ./order
    container_name: order
    ports:
      - "8081:8081"
    depends_on:
      - mysql
      - scheme-registry

#Inventory app
  mysqldb:
    image: mysql:8.3.0
    container_name: mysql-inv
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    ports:
      - "3307:3306"
    volumes:
      - ./mysql:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql

  inventory:
    build: ./inventory
    container_name: inventory
    ports:
      - "8082:8082"
    depends_on:
      - mysqldb

#Notification app
  kafka-consumer:
    #TODO to declare

  notification:
    build: ./notification
    container_name: notification
    ports:
      - "9200:9200"
    depends_on:
      - kafka-consumer

#Gateway app
  auth-keycloak-mysql:
    image: mysql:8.3.0
    container_name: auth-keycloak-mysql
    environment:
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./data/auth_keycloak_mysql_data:/var/lib/mysql

  auth-keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: auth-keycloak
    command: [ "start-dev","--import-realm" ]
    environment:
      DB_VENDOR: mysql
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "9090:8080"
    volumes:
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - auth-keycloak-mysql

  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "9000:9000"
    depends_on:
      - auth-keycloak
