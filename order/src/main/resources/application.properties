spring.application.name=order
#spring.datasource.url=jdbc:mysql://host.docker.internal:3306/orderdb?user=root&password=mysql
#below line works well with containerized db to connect from app in IDE
spring.datasource.url=jdbc:mysql://localhost:3306/orderdb?autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=mysql
spring.jpa.hibernate.ddl-auto=none
server.port=8081
inventory.connect.url=http://localhost:8082

springdoc.swagger-ui.path=/doc/webui
springdoc.api-docs.path=/doc/json

#Useful for om.order.clients.InventoryClient.java
# CircuitBreaker properties for Resilience4j
# to synchronize data correctly
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# COUNT_BASED or TIME_BASED; connected with slidingWindowSize
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=10
# failureRateThreshold is in percentage; 50 means 50 percent
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# idle wait time before switching from open to half-open
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHaalfOpenEnabled=true
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls=5
# count of requests to try in half-open state
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3

# RateLimiter (TimeLimiter) for Resilience4j
############################################
# the max. time duration for which a request may be active.
# Upon expiry of this, the request is failed and counted against slidingWindowSize.
resilience4j.timelimiter.instances.inventory.timeout-Duration=3s

# Retry for Resilience4j
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=2s

#Kafka
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=order-placed

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer